<?php

namespace App\Filament\Resources\SiRusa\PengawasanResource\Pages;

use App\Filament\Resources\SiRusa\PengawasanResource;
use App\Models\SiMike\Proyek;
use Filament\Actions;
use Filament\Pages\Actions\Action;
use Illuminate\Support\Facades\DB;
use Filament\Resources\Pages\ListRecords;

class ListPengawasans extends ListRecords
{
    protected static string $resource = PengawasanResource::class;

    public $tw, $tahun, $anomaly;

    public function mount(): void
    {
        $this->tahun = now()->year;
        $this->tw = intval(ceil(date('n') / 3));
        $this->anomaly = false;
        //dd($this->tw);

        parent::mount(); // TODO: Change the autogenerated stub
    }
    protected function getActions(): array
    {
        return [
            Actions\CreateAction::make(),
            Action::make('cleaning')
                ->action(function () {

                    $proyeks = Proyek::where('total_investasi', 'Usaha Besar')->orWhere('total_investasi', "")->get();

                    foreach ($proyeks as $proyek) {
                        if (!empty ($proyek->jumlah_investasi)) {
                            //dd($row);
                            //dd((int)$row('bangunan_gedung'));
                            $total = (int) $proyek->jumlah_investasi - ((int) $proyek->pembelian_pematangan_tanah + (int) $proyek->bangunan_gedung);
                        } else {
                            $total = $proyek->jumlah_investasi;
                        }
                        if (($total > 1000000000 or $total <= 0) && ($proyek->uraian_skala_usaha === 'Usaha Mikro')) {
                            $this->anomaly = true;
                        }

                        $proyek->total_investasi = $total;
                        $proyek->is_anomaly = $this->anomaly;
                        $proyek->update();
                    }
                })
        ];
    }



    protected function getTableQuery(): \Illuminate\Database\Eloquent\Builder
    {

        /*$test = parent::getTableQuery()
            ->whereHas('nibCheck')
            ->whereNotNull('rilis')
            ->whereNot('uraian_skala_usaha', 'Usaha Mikro')
            ->orderByDesc('total_investasi')
            ->orderByRaw("IF(JSON_EXTRACT(rilis, '$." . $this->tahun . ".tw" . $this->tw ."'), 1, 0) ASC")->toSql();*/


        return parent::getTableQuery()
            ->whereHas('nibCheck')
            ->whereNotNull('rilis')
            ->whereNot('uraian_skala_usaha', 'Usaha Mikro')
            ->orderByDesc('total_investasi');
    }
}
