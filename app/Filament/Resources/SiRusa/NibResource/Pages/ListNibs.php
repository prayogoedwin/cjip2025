<?php

namespace App\Filament\Resources\SiRusa\NibResource\Pages;

use App\Filament\Resources\SiRusa\NibResource;
use App\Filament\Resources\SiRusa\NibResource\Widgets\LastImportNib;
use App\Jobs\SiRusa\CompareNIB;
use App\Jobs\SiRusa\ImportNIB;
use App\Models\SiMike\Proyek;
use App\Models\SiRusa\ReportImport;
use Carbon\Carbon;
use Filament\Actions;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Grid;
use Filament\Notifications\Notification;
use Filament\Pages\Actions\Action;
use Filament\Resources\Pages\ListRecords;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Contracts\Pagination\Paginator;
use Illuminate\Queue\Jobs\Job;
use Illuminate\Support\Facades\Bus;

class ListNibs extends ListRecords
{
    protected static string $resource = NibResource::class;

    protected $listeners = ['filterTable' => 'applyFilter'];
    public $importFilePath;
    public $dataSend;

    public function applyFilter($range)
    {
        //dd($range);
        //dd($this->tableFilters);
        $this->tableFilters['day_of_tanggal_terbit_oss']['day_of_tanggal_terbit_oss'] = $range['tanggal'];
        $this->tableFilters['status_pm']['value'] = $range['status_pm'];
        $this->tableFilters['kabkota']['value'] = $range['kabkota'];
        $this->tableFilters['sektor']['value'] = $range['sektor'];
    }

    public function mount(): void
    {

        $start = Carbon::now()->startOfYear()->format('d/m/Y');
        $end = Carbon::now()->format('d/m/Y');

        $day_of_tanggal_terbit_oss = $start . ' - ' . $end;


        $this->tableFilters['day_of_tanggal_terbit_oss']['day_of_tanggal_terbit_oss'] = $day_of_tanggal_terbit_oss;

        parent::mount(); // TODO: Change the autogenerated stub
    }

    protected function getHeaderActions(): array
    {
        return [
            Action::make('import')
                ->icon('heroicon-o-clipboard-document')
                ->modalHeading('Form Import Perusahaan')
                ->modalSubheading('Import Data Perusahaan Perbulan')
                ->action(function (array $data): void {

                    $this->importFilePath = storage_path('app/public/' . $data['file']);
                    //dd($this->kabkota);
                    // dd($this->importFilePath);
                    //dd($data);
                    $data['file'] = $this->importFilePath;

                    $this->dataSend = $data;

                    // dd($this->dataSend);
        
                    $batches = Bus::batch([
                        new ImportNIB($this->importFilePath, $data['tanggal_awal'], $data['tanggal_akhir'], \auth()->user()->id),
                    ])
                        ->dispatch();

                    // dd($batches);
        
                    if ($batches) {
                        $this->storeReport($this->dataSend);
                    }

                    // $this->batchId = $batches->id;
                    Notification::make()
                        ->view('filament.resources.si-mike.notifications.notifications')
                        ->title('Importing Data NIB')
                        ->body(
                            'Proses **IMPORT** data **NIB** sedang berlangsung.'
                        )
                        ->success()
                        ->send();


                })
                ->form([
                    Grid::make()->schema([

                        DatePicker::make('tanggal_awal'),
                        DatePicker::make('tanggal_akhir'),

                    ])->columns(2),

                    FileUpload::make('file')
                        ->preserveFilenames()
                        ->directory('Si Rusa' . '/NIB/' . Carbon::now()->year)
                        ->acceptedFileTypes(['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])
                        ->autofocus()
                        ->maxSize(51200)
                        ->required()
                        ->helperText('File murni unduhan OSS tidak diedit.')
                ]),

            Action::make('fix')
                ->label('Compare NIB')
                ->action(function () {

                    CompareNIB::dispatch();

                })->hidden(function ($record) {
                    if (auth()->user()->hasRole('super_admin')) {
                        return false;
                    }
                    return true;
                }),
            Action::make('fix_proyek')
                ->action(function () {

                    $proyeks = Proyek::whereNotNull('nib_id')->get();

                    foreach ($proyeks as $proyek) {
                        $proyek->nib_id = null;
                        $proyek->update();
                    }


                })->hidden(function ($record) {
                    if (auth()->user()->hasRole('super_admin')) {
                        return false;
                    }
                    return true;
                }),
            /* Action::make('fix_total')
                 ->action(function () {
                     $ids = ['296013',
                     '350710',
                     '361090',
                     '361094',
                     '361303',
                     '361342',
                     '380005',
                     '380015',
                     '380071',
                     '380509',
                     '402516',
                     '402517',
                     '402776',
                     '402779',
                     '406531',
                     '491827',
                     '491841',
                     '491845',
                     '492255',
                     '532435',
                     '532441',
                     '541213',
                     '541214',
                     '541215',
                     '541216',
                     '541217',
                     '541218',
                     '541219',
                     '541220',
                     '541221',
                     '541229',
                     '541230',
                     '541231',
                     '541232',
                     '541233',
                     '541235',
                     '541237',
                     '541247',
                     '541248',
                     '541401',
                     '541402',
                     '541403',
                     '541404',
                     '541405',
                     '541406',
                     '541407',
                     '541408',
                     '541560',
                     '541561',
                     '541562',
                     '541563',
                     '541564',
                     '541565',
                     '541566',
                     '541567',
                     '541676',
                     '541872',
                     '541873',
                     '542087',
                     '542139',
                     '542234',
                     '542236',
                     '636861',
                     '636863',
                     '636866',
                     '636867',
                     '636868',
                     '636873',
                     '636900',
                     '636901',
                     '636902',
                     '636903',
                     '636904',
                     '636905',
                     '636906',
                     '636907',
                     '636908',
                     '636909',
                     '636961',
                     '637031',
                     '637035',
                     '637036',
                     '637037',
                     '637118',
                     '637119',
                     '637120',
                     '637121',
                     '637122',
                     '637123',
                     '637124',
                     '637125',
                     '637126',
                     '637127',
                     '637128',
                     '637129',
                     '637130',
                     '637131',
                     '637132',
                     '637133',
                     '637141',
                     '637173',
                     '637174',
                     '637204',
                     '637298',
                     '637301',
                     '637330',
                     '637929',
                     '638134',
                     '638176',
                     '638201',
                     '638421',
                     '638602',
                     '638603',
                     '638604',
                     '638605',
                     '638606',
                     '638887',
                     '639336',
                     '639473',
                     '639746',
                     '640062',
                     '640113',
                     '640159',
                     '640170',
                     '640172',
                     '640173',
                     '640174',
                     '640179',
                     '640187',
                     '640189',
                     '640198',
                     '640199',
                     '640200',
                     '640619',
                     '640712',
                     '640853',
                     '640862',
                     '662822',
                     '662828',
                     '662851',
                     '662864',
                     '708177',
                     '708183',
                     '708234',
                     '722338',
                     '722426',
                     '722493',
                     '722494',
                     '722567',
                     '722584',
                     '722680',
                     '722694',
                     '722699',
                     '722701',
                     '722702',
                     '722703',
                     '722704',
                     '722705',
                     '722706',
                     '722707',
                     '722708',
                     '722774',
                     '722802',
                     '722928',
                     '722930',
                     '722931',
                     '722932',
                     '722933',
                     '722934',
                     '722966',
                     '722983',
                     '723240',
                     '723522',
                     '723585',
                     '723586',
                     '723723',
                     '725248',
                     '726413',
                     '726414',
                     '726567',
                     '726614',
                     '726904',
                     '727091',
                     '837101',
                     '837116',
                     '837175',
                     '837186',
                     '837188',
                     '837473',
                     '837572',
                     '837578',
                     '837579',
                     '837580',
                     '837582',
                     '837586',
                     '837587',
                     '837594',
                         ];

                     $proyeks = Proyek::whereIn('id', $ids)->get();


                             foreach ($proyeks as $proyek){

                                 $total = (int)$proyek->jumlah_investasi - ((int)$proyek->pembelian_pematangan_tanah + (int)$proyek->bangunan_gedung);


                                 $proyek->total_investasi = $total;
                                 //dd($updateProyek);
                                 $proyek->update();
                                 }
                     //CompareNIB::dispatch();

                 }),*/

        ];
    }

    public function storeReport(array $data)
    {
        $report = ReportImport::create([
            'user_id' => \auth()->user()->id,
            'tanggal_awal' => $data['tanggal_awal'],
            'tanggal_akhir' => $data['tanggal_akhir'],
            'file' => $data['file'],
            'status' => 1,
        ]);

        $recipient = auth()->user();

        Notification::make()
            ->title('*Import Finished* ' . '(' . \auth()->user()->name . ')')
            ->body(
                'import data *NIB*  telah behasil.'
            )
            ->sendToDatabase($recipient);

        Notification::make()
            ->view('filament.resources.si-mike.notifications.notifications')
            ->title('Pengolahan Data Perusahaan')
            ->body(
                'Proses **Pengolahan** data **NIB** sedang berlangsung. Proses ini mungkin berjalan selama beberapa waktu.'
            )
            ->success()
            ->send();
    }

    protected function getHeaderWidgets(): array
    {
        return [
            LastImportNib::class
        ];
    }
    protected function getTableFiltersFormColumns(): int
    {
        return 4;
    }

    protected function getTableQuery(): Builder
    {
        return parent::getTableQuery()->with('proyeks'); // TODO: Change the autogenerated stub
    }

}
